openapi: 3.0.0
info:
  title: WP2-AMT
  description: Work package 2 of the AMT course. Gamification API
  version: 0.1.9
servers:
  - url: localhost:8080
    description: Local server
paths:
  /badges/{badgeId}:
    get:
      summary: Returns a badge by ID.
      operationId: findBadge
      parameters: 
        - in: path
          name: badgeId
          required: true
          schema: 
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Badge'
  /badges:
    get:
      summary: Returns an array of all badges
      operationId: getBadges
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
    post:
      summary: Creates a new badge.
      operationId: addBadge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '201':
          description: Created
    put:
      summary: Update a badge
      operationId: updateBadge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '200':
          description: Updated
          
  /pointScales/{pointScaleId}:
    get:
      summary: Returns a point scale by ID.
      operationId: findPointScale
      parameters: 
        - in: path
          name: pointScaleId
          required: true
          schema: 
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/PointScale'
  /pointScales:
    get:
      summary: Returns an array of all point scales
      operationId: getPointScales
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/PointScale'
    post:
      summary: Creates a new point scale.
      operationId: addPointScale
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointScale'
      responses:
        '201':
          description: Created
    put:
      summary: Update a point scale
      operationId: updatePointScale
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointScale'
      responses:
        '200':
          description: Updated
  /rules/{ruleId}:
    get:
      summary: Returns a rule by ID.
      operationId: findRule
      parameters: 
        - in: path
          name: ruleId
          required: true
          schema: 
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Rule'
    delete:
      summary: delete a rule by ID
      operationId: deleteRule
      parameters:
        - name: ruleId
          in: path
          description: ID of rule to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: rule deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rules:
    get:
      summary: Returns an array of all rules
      operationId: getRules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
    post:
      summary: Creates a new rule.
      operationId: addRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '201':
          description: Created
    put:
      summary: Update a rule
      operationId: updateRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '200':
          description: Updated
  /events/{eventId}:
    get:
      summary: Returns an event by ID.
      operationId: findEvent
      parameters: 
        - in: path
          name: eventId
          required: true
          schema: 
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Event'
  /events/user/{userId}:
    get:
      summary: Returns all events of a user.
      operationId: getUserEvents
      parameters: 
        - in: path
          name: userId
          required: true
          schema: 
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /events:
    get:
      summary: Returns an array of all events
      operationId: getEvents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: Creates a new event.
      operationId: addEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Created
      
components:
  schemas:
    Badge:
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - name
    PointScale:
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - name
    Rule:
      properties:
        name:
          type: string
        pointScale:
          $ref: '#/components/schemas/PointScale'
        target:
          type: integer
        operator:
          type: string
        reward:
          $ref: '#/components/schemas/Badge'
      required:  
        - name
        - pointScale
        - target
        - condition
        - reward
    Event:
      properties:
        id:
          type: integer
        userId:
          type: integer
        eventType:
          type: string
        timestamp:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
      required:  
        - userId
        - eventType
        - timestamp
        - properties
    Property:
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - name
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
