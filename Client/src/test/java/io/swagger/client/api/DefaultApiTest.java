/*
 * WP2-AMT
 * Work package 2 of the AMT course. Gamification API
 *
 * OpenAPI spec version: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Application;
import io.swagger.client.model.Badge;
import io.swagger.client.model.Error;
import io.swagger.client.model.Event;
import io.swagger.client.model.PointScale;
import io.swagger.client.model.Rule;
import io.swagger.client.model.User;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a new application.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addApplicationTest() throws ApiException {
        Application body = null;
        Application response = api.addApplication(body);

        // TODO: test validations
    }
    /**
     * Creates a new badge.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBadgeTest() throws ApiException {
        Badge body = null;
        api.addBadge(body);

        // TODO: test validations
    }
    /**
     * Creates a new event.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addEventTest() throws ApiException {
        Event body = null;
        api.addEvent(body);

        // TODO: test validations
    }
    /**
     * Creates a new point scale.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPointScaleTest() throws ApiException {
        PointScale body = null;
        api.addPointScale(body);

        // TODO: test validations
    }
    /**
     * Creates a new rule.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addRuleTest() throws ApiException {
        Rule body = null;
        api.addRule(body);

        // TODO: test validations
    }
    /**
     * Creates a new user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserTest() throws ApiException {
        User body = null;
        User response = api.addUser(body);

        // TODO: test validations
    }
    /**
     * delete a rule by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRuleTest() throws ApiException {
        Integer ruleId = null;
        api.deleteRule(ruleId);

        // TODO: test validations
    }
    /**
     * Returns a badge by ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findBadgeTest() throws ApiException {
        Integer badgeId = null;
        Badge response = api.findBadge(badgeId);

        // TODO: test validations
    }
    /**
     * Returns an event by ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findEventTest() throws ApiException {
        Integer eventId = null;
        Event response = api.findEvent(eventId);

        // TODO: test validations
    }
    /**
     * Returns a point scale by ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findPointScaleTest() throws ApiException {
        Integer pointScaleId = null;
        PointScale response = api.findPointScale(pointScaleId);

        // TODO: test validations
    }
    /**
     * Returns a rule by ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findRuleTest() throws ApiException {
        Integer ruleId = null;
        Rule response = api.findRule(ruleId);

        // TODO: test validations
    }
    /**
     * Returns an array of all badges
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBadgesTest() throws ApiException {
        List<Badge> response = api.getBadges();

        // TODO: test validations
    }
    /**
     * Returns an array of all events
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        List<Event> response = api.getEvents();

        // TODO: test validations
    }
    /**
     * Returns an array of all point scales
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPointScalesTest() throws ApiException {
        List<PointScale> response = api.getPointScales();

        // TODO: test validations
    }
    /**
     * Returns an array of all rules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesTest() throws ApiException {
        List<Rule> response = api.getRules();

        // TODO: test validations
    }
    /**
     * Returns all events of a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserEventsTest() throws ApiException {
        Integer userId = null;
        List<Event> response = api.getUserEvents(userId);

        // TODO: test validations
    }
    /**
     * Update a badge
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBadgeTest() throws ApiException {
        Badge body = null;
        api.updateBadge(body);

        // TODO: test validations
    }
    /**
     * Update a point scale
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePointScaleTest() throws ApiException {
        PointScale body = null;
        api.updatePointScale(body);

        // TODO: test validations
    }
    /**
     * Update a rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRuleTest() throws ApiException {
        Rule body = null;
        api.updateRule(body);

        // TODO: test validations
    }
}
